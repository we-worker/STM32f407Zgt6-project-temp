#include "05D_UI_progress.h"

#include "math.h"
#include <stdio.h>
#include "input_event.h"

#include "UI.h"

void useless_main(void);


uint16 Screen_flash_cnt=0;

void Screen_main(void)
{
Button btn_start; //定义一个按钮结构体
btn_start.x = 100; //设置按钮左上角的x坐标为100
btn_start.y = 200; //设置按钮左上角的y坐标为200
btn_start.width = 80; //设置按钮的宽度为80
btn_start.height = 40; //设置按钮的高度为40
btn_start.color = 0x895C ; //设置按钮的颜色为红色
btn_start.text = "Start"; //设置按钮上显示的文字为“开始”
btn_start.size = 16; //设置文字的大小为16
btn_start.state = 0; //设置按钮的初始状态为未按下
btn_start.action = Screen_main; //设置按钮按下时触发的函数为start

    Screen_flash_cnt++;
		//delay_ms(1);
    if (Screen_flash_cnt >= 100)
        Screen_flash_cnt = 0;

    char display_str[30];
    BRUSH_COLOR = RED; // 显示颜色变为红色

    if (Screen_flash_cnt == 0)
    {

        // 高速时需要开关tim2实现采集，不卡顿
        if (TIM2->CR1 == 0)		   // 等待被关闭  说明FTT计算完毕
            TIM_Cmd(TIM2, ENABLE); // 使能定时器2
    }
    if (is_show__wave == 1)
    {
        if (Screen_flash_cnt == 0)
        {
            // 清空屏幕
            LCD_Fill_onecolor(0, 0, lcd_width - 1, lcd_height - 1, 0xffff);
            u16 waveform_height = lcd_height;				   // 计算波形显示区域的高度
            float adc_value_range = waveform_height / 4000.0f; // 假设ADC的取值范围为0-4095
						useless_main();
					
					  int show_buffer_size = Fs*10/2/frequency;						   // 绘制的范围，避免太多了。
            drawWaveform(show_buffer_size, ADC_Value, 0, lcd_height / 2, lcd_height / 2, adc_value_range, RED);
            drawWaveform(show_buffer_size, ADC2_Value, 0, lcd_height / 2, lcd_height / 2, adc_value_range, BLUE);
          LCD_DrawButton(&btn_start); //画出开始按钮  
					LCD_CheckButton(&btn_start);
					// for (int i = 0; i < 7; i++)
            // {
            // 	SPI_data[i] = RecvFrom_FPGA(i, 4);
            // 	sprintf((char *)display_str, "data:%#x", SPI_data[i]); // 浮点型数据  e-01  就是除于10      /10
            // 	LCD_DisplayString(10, 200 + 12 * i, 12, display_str);  // 实际电压数值
            // }
        }
    }
    else if (is_show__wave == 2)
    {
        display_fft();
    }
    else
    {
        if (Screen_flash_cnt == 0)
            Display_characteristic2();
        // delay_ms(500);
    }
}



void useless_main(void)
{
		ADC_progress();
    char display_str[30];

    BRUSH_COLOR = BLUE;										  // 显示颜色变为红色
    sprintf((char *)display_str, "ADC1 freq:%.4f", frequency); // 浮点型数据  e-01  就是除于10      /10
    LCD_DisplayString(10, 110, 24, display_str);			  // 实际电压数值

    sprintf((char *)display_str, "peak to p:%d", peak_to_peak ); // 浮点型数据  e-01  就是除于10      /10
    LCD_DisplayString(10, 170, 24, display_str);		// 实际电压数值
}


